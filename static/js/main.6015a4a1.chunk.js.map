{"version":3,"sources":["components/logo.svg","components/mapComponent.jsx","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","mapboxgl","accessToken","Map","props","mapRef","React","createRef","state","error","isLoaded","covidData","daysList","totalDays","currentDate","sayHello","bind","handleSlideChange","displayDate","value","event","newValue","this","dayNum","singleDay","singleDayofData","date","Date","setState","toDateString","forEach","item","push","features","map","querySourceFeatures","sourceLayer","feature","setFeatureState","source","id","properties","AWATER","itemx","geoid","fips","GEOID","Number","cases","d3","then","data","cassesArray","row","Math","max","apply","uniqueDays","indexOf","length","container","current","style","center","zoom","on","addSource","type","tiles","window","location","origin","minzoom","maxzoom","promoteId","addLayer","paint","isSourceLoaded","setAfterLoad","e","sourceId","off","addControl","NavigationControl","ref","Slider","defaultValue","getAriaValueText","valueLabelFormat","aria-labelledby","valueLabelDisplay","step","marks","min","onChange","Paper","className","elevation","class","Component","App","preventDefault","stopPropagation","open","src","logo","alt","onClick","handleClick","viewBox","d","fill","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6015a4a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport * as d3 from \"d3\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { Paper } from \"@material-ui/core\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoiZmNhaW4iLCJhIjoiY2lnM3F1ZDF2MjF6bHVubTM2Y2QyNHpoeCJ9.443BUaCAuZHIJkNO9rNFrg\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      covidData: [],\n      daysList: [],\n      totalDays: 25,\n      currentDate: \"\",\n    };\n    this.sayHello = this.sayHello.bind(this);\n    this.handleSlideChange = this.handleSlideChange.bind(this);\n    this.displayDate = this.displayDate.bind(this);\n  }\n\n  displayDate(value) {\n    return \"day \" + value;\n  }\n\n  handleSlideChange(event, newValue) {\n    this.sayHello(newValue);\n  }\n\n  sayHello(dayNum) {\n    //get the date from the the\n    //var singleDayx = this.state.daysList[dayNum];\n\n    var singleDay = this.state.daysList[dayNum];\n    var singleDayofData = [];\n    var date = new Date(singleDay);\n    this.setState({ currentDate: date.toDateString() });\n\n    this.state.covidData.forEach((item) => {\n      if (item.date == singleDay) {\n        singleDayofData.push(item);\n      }\n    });\n\n    var features = this.map.querySourceFeatures(\"counties\", {\n      sourceLayer: \"counties\",\n    });\n\n    //reset to 0\n    features.forEach((feature) => {\n      this.map.setFeatureState(\n        {\n          source: \"counties\",\n          sourceLayer: \"counties\",\n          id: feature.properties.id,\n        },\n        { AWATER: 0 }\n      );\n    });\n\n    singleDayofData.forEach((itemx) => {\n      var geoid = itemx.fips;\n\n      features.forEach((feature) => {\n        if (feature.properties.GEOID == geoid) {\n          this.map.setFeatureState(\n            {\n              source: \"counties\",\n              sourceLayer: \"counties\",\n              id: feature.properties.id,\n            },\n            { AWATER: Number(itemx.cases) }\n          );\n        }\n      });\n    });\n  }\n\n  mapRef = React.createRef();\n\n  componentDidMount() {\n    d3.csv(\n      \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n    ).then(\n      function (data) {\n        //this.covidData = data;\n        this.setState({ covidData: data });\n\n        //get the largest reported number\n        var cassesArray = [];\n        data.map((row) => {\n          cassesArray.push(Number(row.cases));\n        });\n        var largestReportNum = Math.max.apply(Math, cassesArray);\n\n        //determine total number of days\n        const uniqueDays = [];\n        data.map((row) => {\n          if (uniqueDays.indexOf(row.date) === -1) {\n            uniqueDays.push(row.date);\n          }\n        });\n        this.setState({ totalDays: uniqueDays.length });\n        this.setState({ daysList: uniqueDays });\n        var date = new Date(uniqueDays[0]);\n        this.setState({ currentDate: date.toDateString() });\n\n        //create map and add vector layers\n        this.map = new mapboxgl.Map({\n          container: this.mapRef.current,\n          style: \"mapbox://styles/mapbox/dark-v10\",\n          center: [-97.8223, 37.1253],\n          zoom: 4,\n        });\n\n        //this.map.on(\"move\", () => {});\n\n        this.map.on(\n          \"load\",\n          function () {\n            this.map.addSource(\"counties\", {\n              type: \"vector\",\n              tiles: [window.location.origin + \"covid/tiles/{z}/{x}/{y}.pbf\"],\n              minzoom: 0,\n              maxzoom: 22,\n              promoteId: \"id\",\n            });\n            this.map.addLayer({\n              id: \"counties\",\n              type: \"fill\",\n              source: \"counties\",\n              \"source-layer\": \"counties\",\n\n              paint: {\n                \"fill-color\": [\n                  \"step\",\n                  [\"feature-state\", \"AWATER\"],\n                  \"white\",\n                  1,\n                  \"#faf769\",\n                  10,\n                  \"#f5bc4c\",\n                  100,\n                  \"#f7983e\",\n                  500,\n                  \"#f7723e\",\n                  1000,\n                  \"#f51d1d\",\n                ],\n\n                \"fill-outline-color\": \"black\",\n                \"fill-opacity\": 0.45,\n              },\n            });\n\n            const setAfterLoad = (e) => {\n              if (e.sourceId === \"counties\" && e.isSourceLoaded) {\n                this.sayHello(0);\n                this.map.off(\"sourcedata\", setAfterLoad);\n              }\n            };\n\n            if (this.map.isSourceLoaded(\"counties\")) {\n              this.sayHello(0);\n            } else {\n              this.map.on(\"sourcedata\", setAfterLoad);\n            }\n          }.bind(this)\n        );\n\n        this.map.addControl(new mapboxgl.NavigationControl());\n      }.bind(this)\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" ref={this.mapRef} />\n\n        <div id=\"slideContainer\">\n          <Slider\n            defaultValue={0}\n            getAriaValueText={this.displayDate}\n            valueLabelFormat={this.displayDate}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"on\"\n            step={1}\n            marks\n            min={0}\n            max={this.state.totalDays - 1}\n            onChange={this.handleSlideChange}\n          />\n        </div>\n        <Paper className=\"dateDisplay\" elevation={3}>\n          {this.state.currentDate}\n        </Paper>\n\n        <div class=\"map-overlay\" id=\"legend\">\n          Cumulative Covid-19 cases per county\n          <div>\n            <span id=\"LegendItem1\" className=\"legend-key\"></span>\n            <span>0-1</span>\n          </div>\n          <div>\n            <span id=\"LegendItem2\" className=\"legend-key\"></span>\n            <span>1-10</span>\n          </div>\n          <div>\n            <span id=\"LegendItem3\" className=\"legend-key\"></span>\n            <span>10-100</span>\n          </div>\n          <div>\n            <span id=\"LegendItem4\" className=\"legend-key\"></span>\n            <span>100-500</span>\n          </div>\n          <div>\n            <span id=\"LegendItem5\" className=\"legend-key\"></span>\n            <span>500-1000</span>\n          </div>\n          <div>\n            <span id=\"LegendItem6\" className=\"legend-key\"></span>\n            <span>>1000</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Map from \"./mapComponent\";\n\nclass App extends Component {\n  state = {};\n  handleClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    window.open(\"https://github.com/nytimes/covid-19-data\", \"_blank\");\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Map></Map>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <svg\n            onClick={this.handleClick}\n            className=\"css-1tel06d nyt\"\n            viewBox=\"0 0 16 22\"\n          >\n            <path\n              d=\"M15.863 13.08c-.687 1.818-1.923 3.147-3.64 3.916v-3.917l2.129-1.958-2.129-1.889V6.505c1.923-.14 3.228-1.609 3.228-3.358C15.45.84 13.32 0 12.086 0c-.275 0-.55 0-.962.14v.14h.481c.824 0 1.51.42 1.51 1.189 0 .63-.48 1.189-1.304 1.189-2.129 0-4.6-1.749-7.279-1.749C2.13.91.481 2.728.481 4.546c0 1.819 1.03 2.448 2.128 2.798v-.14c-.343-.21-.618-.63-.618-1.189 0-.84.756-1.469 1.648-1.469 2.267 0 5.906 1.959 8.172 1.959h.206v2.727l-2.129 1.889 2.13 1.958v3.987c-.894.35-1.786.49-2.748.49-3.502 0-5.768-2.169-5.768-5.806 0-.839.137-1.678.344-2.518l1.785-.769v7.973l3.57-1.608V6.575L3.984 8.953c.55-1.61 1.648-2.728 2.953-3.358v-.07C3.433 6.295 0 9.023 0 13.08c0 4.686 3.914 7.974 8.446 7.974 4.807 0 7.485-3.288 7.554-7.974h-.137z\"\n              fill=\"#000\"\n            ></path>\n          </svg>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}